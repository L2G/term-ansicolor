var search_data = {"index":{"searchIndex":["term","ansicolor","attributes()","coloring=()","coloring?()","support?()","uncolored()","readme.rdoc","ansicolor.rb","version.rb"],"longSearchIndex":["lib/term/ansicolor.rb","term","term::ansicolor","term::ansicolor","term::ansicolor","term::ansicolor","term::ansicolor","files/readme_rdoc.html","files/lib/term/ansicolor_rb.html","files/lib/term/ansicolor/version_rb.html"],"info":[["Term","lib/term/ansicolor.rb","classes/Term.html"," < ","",1],["ANSIColor","Term","classes/Term/ANSIColor.html"," < ","The ANSIColor module can be used for namespacing and mixed into your own classes. ",1],["attributes","Term::ANSIColor","classes/Term/ANSIColor.html#M000004","()","Returns an array of all Term::ANSIColor attributes as symbols. ",2],["coloring=","Term::ANSIColor","classes/Term/ANSIColor.html#M000002","(val)","Turns the coloring on or off globally, so you can easily do this for example: Term::ANSIColor::coloring",2],["coloring?","Term::ANSIColor","classes/Term/ANSIColor.html#M000001","()","Returns true, if the coloring function of this module is switched on, false otherwise. ",2],["support?","Term::ANSIColor","classes/Term/ANSIColor.html#M000000","(feature)","Returns true if Term::ANSIColor supports the +feature+. The feature :clear, that is mixing the clear",2],["uncolored","Term::ANSIColor","classes/Term/ANSIColor.html#M000003","(string = nil)","Returns an uncolored version of the string, that is all ANSI-sequences are stripped from the string.",2],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= Term::ANSIColor - ANSI escape sequences in Ruby  == Description  This library can be used to color/decolor",3],["ansicolor.rb","files/lib/term/ansicolor_rb.html","files/lib/term/ansicolor_rb.html","","",3],["version.rb","files/lib/term/ansicolor/version_rb.html","files/lib/term/ansicolor/version_rb.html","","",3]]}}